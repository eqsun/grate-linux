// SPDX-License-Identifier: GPL-2.0

/dts-v1/;

#include <dt-bindings/input/input.h>
#include "tegra30.dtsi"

/ {
	model = "Lenovo IdeaPad Yoga 11";
	compatible = "lenovo,ideapad-yoga-11", "nvidia,tegra30";

	aliases {
		mmc0 = &sdmmc4; /* eMMC */
		mmc1 = &sdmmc1; /* uSD slot */
		mmc2 = &sdmmc3; /* WiFi */

		rtc0 = &pmic;
		rtc1 = "/rtc@7000e000";
	};

	/* clock from PMIC */
	clk32k_in: clock-32 {
		compatible = "fixed-clock";
		clock-frequency = <32768>;
		#clock-cells = <0>;
	};

	host1x@50000000 {
		dc@54200000 {
			rgb {
				status = "okay";

				port@0 {
					lcd_output: endpoint {
						remote-endpoint = <&lvds_encoder_input>;
						bus-width = <24>;
					};
				};
			};
		};

		hdmi@54280000 {
			status = "okay";
			nvidia,ddc-i2c-bus = <&hdmi_ddc>;
			nvidia,hpd-gpio = <&gpio TEGRA_GPIO(N, 7) GPIO_ACTIVE_HIGH>;
		};
	};

	pinmux@70000868 {
		pinctrl-names = "default";
		pinctrl-0 = <&state_default>;

		state_default: pinmux {
			/* HDMI HOTPLUG_DETECT */
			/*hdmi-int-pn7 {
				nvidia,pins = "hdmi_int_pn7";
				nvidia,function = "hdmi";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_ENABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};*/

			/* Backlight PWM */
			gmi-ad8-ph0 {
				nvidia,pins = "gmi_ad8_ph0";
				nvidia,function = "pwm0";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_DISABLE>;
			};
		};
	};

	pwm@7000a000 {
		status = "okay";
	};

	i2c@7000c000 {
		status = "okay";
		clock-frequency = <100000>;
	};

	i2c@7000c400 {
		status = "okay";
		clock-frequency = <400000>;

		/* Atmel Maxtouch HID over I2C */
		touchscreen@5b {
			compatible = "hid-over-i2c";
			reg = <0x5b>;
			hid-descr-addr = <0x0000>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(H, 4) IRQ_TYPE_LEVEL_LOW>;
			// reset H6
		};

		/* Touchpad HID over I2C */
		touchpad@2c {
			compatible = "hid-over-i2c";
			reg = <0x2c>;
			hid-descr-addr = <0x0020>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(K, 2) IRQ_TYPE_LEVEL_LOW>;
		};
	};

	i2c@7000c500 {
		status = "okay";
		clock-frequency = <400000>;

		rt5640: audio-codec@1c {
			compatible = "realtek,rt5640";
			reg = <0x1c>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(W, 3) IRQ_TYPE_LEVEL_HIGH>;
		};

		gyroscope@68 {
			compatible = "invensense,mpu6050";
			reg = <0x68>;

			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(X, 1) IRQ_TYPE_EDGE_RISING>;

			vdd-supply    = <&vdd_3v3_sys_reg>;
			//vlogic-supply = <&vdd_1v8_vio>;

			i2c-gate {
				#address-cells = <1>;
				#size-cells = <0>;
			};
		};

		// Maybe change accel interrupts
		accelerometer@e {
			compatible = "kionix,kxtf9";
			reg = <0x0e>;

			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(L, 5) IRQ_TYPE_EDGE_RISING>;

			//vdd-supply = <&vdd_1v8_vio>;
			//vddio-supply = <&vdd_1v8_vio>;
		};

		accelerometer@f {
			compatible = "kionix,kxtf9";
			reg = <0x0f>;

			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(L, 1) IRQ_TYPE_EDGE_RISING>;

			//vdd-supply = <&vdd_1v8_vio>;
			//vddio-supply = <&vdd_1v8_vio>;
		};
	};

	hdmi_ddc: i2c@7000c700 {
		status = "okay";
		clock-frequency = <100000>;
	};

	i2c@7000d000 {
		status = "okay";
		clock-frequency = <400000>;

		// Right now only for RealTimeClock
		pmic: tps65911@2d {
			compatible = "ti,tps65911";
			reg = <0x2d>;

			interrupts = <GIC_SPI 86 IRQ_TYPE_LEVEL_HIGH>;
			#interrupt-cells = <2>;
			interrupt-controller;

			ti,system-power-controller;

			#gpio-cells = <2>;
			gpio-controller;

			//vcc3-supply = <&vdd_5v0_sys_reg>;
			vcc4-supply = <&vdd_5v0_sys_reg>;
			vcc5-supply = <&vdd_ac_bat_reg>;
			vcc7-supply = <&vdd_ac_bat_reg>;

			vccio-supply = <&vdd_ac_bat_reg>;

			regulators {
				// vdd1 - not connected

				vdd2_reg: vdd2 {
					regulator-name = "vdd_1v5_gen";
					regulator-min-microvolt = <1500000>;
					regulator-max-microvolt = <1500000>;
					regulator-always-on;
				};

				vdd_cpu: vddctrl {
					regulator-name = "vdd_cpu,vdd_sys";
					regulator-min-microvolt = <800000>;
					regulator-max-microvolt = <1250000>;
					regulator-coupled-with = <&vdd_core>;
					regulator-coupled-max-spread = <300000>;
					regulator-max-step-microvolt = <100000>;
					regulator-always-on;

					nvidia,tegra-cpu-regulator;
				};

				vdd_1v8_gen_reg: vio {
					regulator-name = "vdd_1v8_gen";
					regulator-min-microvolt = <1800000>;
					regulator-max-microvolt = <1800000>;
					regulator-always-on;
				};

				// LDO1 - not conencted
				// LDO2 - not conencted

				vdd_3v3_sdmmc1_reg: ldo3 {
					regulator-name = "vdd_3v3_sdmmc1";
					regulator-min-microvolt = <1800000>;
					regulator-max-microvolt = <3300000>;
					regulator-always-on;
				};

				vdd_1v2_rts_tegra_reg: ldo4 {
					regulator-name = "vdd_1v2_rtc_tegra";
					regulator-min-microvolt = <1200000>;
					regulator-max-microvolt = <1200000>;
					regulator-always-on;
				};

				// LDO5 - not conencted

				avdd_1v2_dsi_csi_reg: ldo6 {
					regulator-name = "avdd_1v2_dsi_csi_tegra";
					regulator-min-microvolt = <1200000>;
					regulator-max-microvolt = <1200000>;
				};

				ldo7_reg: ldo7 {
					regulator-name = "avdd_1v2_pll_tegra";
					regulator-min-microvolt = <1200000>;
					regulator-max-microvolt = <1200000>;
					regulator-always-on;
				};

				ldo8_reg: ldo8 {
					regulator-name = "vdd_1v0_ddr_hs_tegra";
					regulator-min-microvolt = <1000000>;
					regulator-max-microvolt = <1000000>;
					regulator-always-on;
				};
			};
		};
		
		vdd_core: core-regulator@60 {
			compatible = "ti,tps62361";
			reg = <0x60>;

			regulator-name = "tps62361-vout";
			regulator-min-microvolt = <500000>;
			regulator-max-microvolt = <1350000>;
			regulator-coupled-with = <&vdd_cpu>;
			regulator-coupled-max-spread = <300000>;
			regulator-max-step-microvolt = <100000>;
			regulator-boot-on;
			regulator-always-on;
			ti,enable-vout-discharge;
			ti,vsel0-state-high;
			ti,vsel1-state-high;

			nvidia,tegra-core-regulator;
		};
	};

	kbc@7000e200 {
		status = "okay";
		nvidia,debounce-delay-ms = <2>;
		nvidia,repeat-delay-ms = <160>;
		nvidia,kbc-row-pins = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15>;
		nvidia,kbc-col-pins = <16 17 18 19 20 21 22 23>;

		linux,keymap = <
			MATRIX_KEY(0x00, 0x01, KEY_TAB)
			MATRIX_KEY(0x00, 0x02, KEY_GRAVE)
			MATRIX_KEY(0x00, 0x03, KEY_1)
			MATRIX_KEY(0x00, 0x04, KEY_Q)
			MATRIX_KEY(0x00, 0x05, KEY_A)

			MATRIX_KEY(0x01, 0x06, KEY_RIGHTALT)
			MATRIX_KEY(0x01, 0x07, KEY_LEFTALT)

			MATRIX_KEY(0x02, 0x00, KEY_F3)
			MATRIX_KEY(0x02, 0x01, KEY_F4)
			MATRIX_KEY(0x02, 0x02, KEY_CAPSLOCK)
			MATRIX_KEY(0x02, 0x03, KEY_3)
			MATRIX_KEY(0x02, 0x04, KEY_E)
			MATRIX_KEY(0x02, 0x05, KEY_D)
			MATRIX_KEY(0x02, 0x06, KEY_C)
			MATRIX_KEY(0x02, 0x07, KEY_SPACE)

			MATRIX_KEY(0x03, 0x00, KEY_F2)
			MATRIX_KEY(0x03, 0x01, KEY_F1)
			MATRIX_KEY(0x03, 0x02, KEY_ESC)
			MATRIX_KEY(0x03, 0x03, KEY_2)
			MATRIX_KEY(0x03, 0x04, KEY_W)
			MATRIX_KEY(0x03, 0x05, KEY_S)
			MATRIX_KEY(0x03, 0x06, KEY_X)
			MATRIX_KEY(0x03, 0x07, KEY_Z)

			MATRIX_KEY(0x04, 0x00, KEY_LEFTCTRL)

			MATRIX_KEY(0x05, 0x00, KEY_G)
			MATRIX_KEY(0x05, 0x01, KEY_T)
			MATRIX_KEY(0x05, 0x02, KEY_5)
			MATRIX_KEY(0x05, 0x03, KEY_4)
			MATRIX_KEY(0x05, 0x04, KEY_R)
			MATRIX_KEY(0x05, 0x05, KEY_F)
			MATRIX_KEY(0x05, 0x06, KEY_V)
			MATRIX_KEY(0x05, 0x07, KEY_B)

			MATRIX_KEY(0x06, 0x00, KEY_H)
			MATRIX_KEY(0x06, 0x01, KEY_Y)
			MATRIX_KEY(0x06, 0x02, KEY_6)
			MATRIX_KEY(0x06, 0x03, KEY_7)
			MATRIX_KEY(0x06, 0x04, KEY_U)
			MATRIX_KEY(0x06, 0x05, KEY_J)
			MATRIX_KEY(0x06, 0x06, KEY_M)
			MATRIX_KEY(0x06, 0x07, KEY_N)

			MATRIX_KEY(0x07, 0x01, KEY_F11)
			MATRIX_KEY(0x07, 0x02, KEY_F10)
			MATRIX_KEY(0x07, 0x03, KEY_9)
			MATRIX_KEY(0x07, 0x04, KEY_O)
			MATRIX_KEY(0x07, 0x05, KEY_L)
			MATRIX_KEY(0x07, 0x06, KEY_DOT)
			MATRIX_KEY(0x07, 0x07, KEY_DOWN)

			MATRIX_KEY(0x08, 0x04, KEY_RIGHTSHIFT)
			MATRIX_KEY(0x08, 0x05, KEY_LEFTSHIFT)

			MATRIX_KEY(0x09, 0x00, KEY_F7)
			MATRIX_KEY(0x09, 0x01, KEY_F6)
			MATRIX_KEY(0x09, 0x02, KEY_F5)
			MATRIX_KEY(0x09, 0x03, KEY_8)
			MATRIX_KEY(0x09, 0x04, KEY_I)
			MATRIX_KEY(0x09, 0x05, KEY_K)
			MATRIX_KEY(0x09, 0x06, KEY_COMMA)

			MATRIX_KEY(0x0A, 0x00, KEY_F8)
			MATRIX_KEY(0x0A, 0x01, KEY_F9)
			MATRIX_KEY(0x0A, 0x02, KEY_BACKSLASH)
			MATRIX_KEY(0x0A, 0x03, KEY_102ND)
			MATRIX_KEY(0x0A, 0x04, KEY_COMPOSE)
			MATRIX_KEY(0x0A, 0x05, KEY_LEFT)

			MATRIX_KEY(0x0B, 0x00, KEY_RIGHTCTRL)
			MATRIX_KEY(0x0B, 0x03, KEY_FN)

			MATRIX_KEY(0x0C, 0x02, KEY_LEFTMETA)

			MATRIX_KEY(0x0D, 0x00, KEY_MINUS)
			MATRIX_KEY(0x0D, 0x02, KEY_0)
			MATRIX_KEY(0x0D, 0x03, KEY_P)
			MATRIX_KEY(0x0D, 0x04, KEY_LEFTBRACE)
			MATRIX_KEY(0x0D, 0x05, KEY_SEMICOLON)
			MATRIX_KEY(0x0D, 0x06, KEY_SLASH)
			MATRIX_KEY(0x0D, 0x07, KEY_UP)

			MATRIX_KEY(0x0E, 0x01, KEY_PRINT)
			MATRIX_KEY(0x0E, 0x02, KEY_EQUAL)
			MATRIX_KEY(0x0E, 0x03, KEY_BACKSPACE)
			MATRIX_KEY(0x0E, 0x04, KEY_RIGHTBRACE)
			MATRIX_KEY(0x0E, 0x06, KEY_APOSTROPHE)
			MATRIX_KEY(0x0E, 0x07, KEY_ENTER)

			MATRIX_KEY(0x0F, 0x02, KEY_DELETE)
			MATRIX_KEY(0x0F, 0x03, KEY_PAGEUP)
			MATRIX_KEY(0x0F, 0x04, KEY_INSERT)
			MATRIX_KEY(0x0F, 0x05, KEY_F12)
			MATRIX_KEY(0x0F, 0x06, KEY_PAGEDOWN)
			MATRIX_KEY(0x0F, 0x07, KEY_RIGHT)

			/////////////////////////////////////////
			//////////////// FN KEYS ////////////////
			/////////////////////////////////////////
			// don't work right now. check for dmesg errors

			MATRIX_KEY(0x12, 0x00, KEY_VOLUMEUP) // F3
			MATRIX_KEY(0x12, 0x01, KEY_F4) // F4

			MATRIX_KEY(0x13, 0x00, KEY_VOLUMEDOWN) // F2
			MATRIX_KEY(0x13, 0x01, KEY_MUTE) // F1

			MATRIX_KEY(0x17, 0x01, KEY_BRIGHTNESSDOWN) // F11
			MATRIX_KEY(0x17, 0x02, KEY_F10) // F10

			MATRIX_KEY(0x19, 0x00, KEY_F7) // F7
			MATRIX_KEY(0x19, 0x01, KEY_TOUCHPAD_TOGGLE) // F6
			MATRIX_KEY(0x19, 0x02, KEY_F5) // F5

			MATRIX_KEY(0x1F, 0x05, KEY_BRIGHTNESSUP) // F12

			MATRIX_KEY(0x1F, 0x03, KEY_HOME) // PAGEUP
			MATRIX_KEY(0x1F, 0x06, KEY_END) // PAGEDOWN
		>;
	};

	ahub@70080000 {
		i2s@70080400 {
			status = "okay";
		};
	};

	/* SD Card - SDMMC-1 */
	mmc@78000000 {
		status = "okay";
		vqmmc-supply = <&ldo3_reg>;
		bus-width = <4>;
		power-gpios = <&gpio TEGRA_GPIO(D, 7) GPIO_ACTIVE_HIGH>;
		cd-gpios = <&gpio TEGRA_GPIO(I, 5) GPIO_ACTIVE_LOW>;
		//wp-gpios = <&gpio TEGRA_GPIO(T, 3) GPIO_ACTIVE_HIGH>;
	};

	/* WiFi - SDMMC-3 */
	mmc@78000400 {
		status = "okay";

		#address-cells = <1>;
		#size-cells = <0>;

		assigned-clocks = <&tegra_car TEGRA30_CLK_SDMMC3>;
		assigned-clock-parents = <&tegra_car TEGRA30_CLK_PLL_C>;
		assigned-clock-rates = <50000000>;

		max-frequency = <50000000>;
		keep-power-in-suspend;
		bus-width = <4>;
		non-removable;

		mmc-pwrseq = <&brcm_wifi_pwrseq>;
		vmmc-supply = <&vdd_3v3_com>;

		/* Azurewave AW-NH615 BCM4329 or AW-NH665 BCM4330 */
		wifi@1 {
			compatible = "brcm,bcm4329-fmac";
			reg = <1>;

			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(O, 4) IRQ_TYPE_LEVEL_HIGH>;
			interrupt-names = "host-wake";
		};
	};

	/* internal 32/64GB eMMC - SDMMC-4 */
	mmc@78000600 {
		status = "okay";
		bus-width = <8>;
		non-removable;
	};

	/* USB Left */
	usb@7d000000 {
		status = "okay";
	};

	usb-phy@7d000000 {
		status = "okay";
	};

	/* USB Right */
	usb@7d008000 {
		status = "okay";
	};

	usb-phy@7d008000 {
		status = "okay";
	};

	backlight: backlight {
		compatible = "pwm-backlight";
		enable-gpios = <&gpio TEGRA_GPIO(H, 2) GPIO_ACTIVE_HIGH>;
		pwms = <&pwm 0 50000>;
		brightness-levels = <1 255>;
		num-interpolated-steps = <254>;
		default-brightness-level = <128>;
	};

	brcm_wifi_pwrseq: wifi-pwrseq {
		compatible = "mmc-pwrseq-simple";

		clocks = <&tegra_pmc TEGRA_PMC_CLK_BLINK>;
		clock-names = "ext_clock";

		post-power-on-delay-ms = <300>;
		power-off-delay-us = <300>;
	};

	panel: display-panel {
		compatible = "panel-lvds";

		power-supply = <&vdd_pnl>;
		backlight = <&backlight>;

		width-mm = <235>;
		height-mm = <132>;
		rotation = <0>;

		data-mapping = "jeida-24";

		panel-timing {
			clock-frequency = <71980000>;

			hactive = <1366>;
			vactive = <768>;

			hfront-porch = <56>;
			hsync-len = <14>;
			hback-porch = <106>;

			vfront-porch = <3>;
			vsync-len = <1>;
			vback-porch = <6>;
		};

		port {
			panel_input: endpoint {
				remote-endpoint = <&lvds_encoder_output>;
			};
		};
	};

	gpio-keys {
		compatible = "gpio-keys";

		label = "GPIO Buttons";

		power {
			label = "Power Button";
			gpios = <&gpio TEGRA_GPIO(V, 0) GPIO_ACTIVE_LOW>;
			linux,code = <KEY_POWER>;
			debounce-interval = <10>;
			wakeup-source;
		};

		windows-button {
			label = "Windows Button";
			gpios = <&gpio TEGRA_GPIO(O, 5) GPIO_ACTIVE_LOW>;
			linux,code = <KEY_LEFTMETA>;
			debounce-interval = <10>;
			wakeup-source;
		};

		magic-button {
			label = "Rotation Lock";
			gpios = <&gpio TEGRA_GPIO(K, 4) GPIO_ACTIVE_LOW>;
			linux,code = <KEY_ROTATE_LOCK_TOGGLE>;
			debounce-interval = <10>;
		};

		volume-up {
			label = "Volume Up";
			gpios = <&gpio TEGRA_GPIO(K, 5) GPIO_ACTIVE_LOW>;
			linux,code = <KEY_VOLUMEUP>;
			debounce-interval = <10>;
		};

		volume-down {
			label = "Volume Down";
			gpios = <&gpio TEGRA_GPIO(K, 6) GPIO_ACTIVE_LOW>;
			linux,code = <KEY_VOLUMEDOWN>;
			debounce-interval = <10>;
		};

		lid {
			label = "Lid";
			gpios = <&gpio TEGRA_GPIO(J, 2) GPIO_ACTIVE_LOW>;
			linux,code = <SW_LID>;
			debounce-interval = <10>;
			wakeup-source;
		};
	};

	lvds-encoder {
		compatible = "lvds-encoder";

		//powerdown-gpios = <&gpio TEGRA_GPIO(C, 1) GPIO_ACTIVE_LOW>;

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port@0 {
				reg = <0>;

				lvds_encoder_input: endpoint {
					remote-endpoint = <&lcd_output>;
				};
			};

			port@1 {
				reg = <1>;

				lvds_encoder_output: endpoint {
					remote-endpoint = <&panel_input>;
				};
			};
		};
	};

	sound {
		compatible = "nvidia,tegra-audio-rt5640-ideapadYoga11",
			"nvidia,tegra-audio-rt5640";
		nvidia,model = "lenovo-ideapad-yoga-11-rt5642";

		nvidia,audio-routing =
			"Headphones", "HPOR",
			"Headphones", "HPOL",
			"Speakers", "SPORP",
			"Speakers", "SPORN",
			"Speakers", "SPOLP",
			"Speakers", "SPOLN";

		nvidia,i2s-controller = <&tegra_i2s1>;
		nvidia,audio-codec = <&rt5640>;

		nvidia,hp-det-gpios = <&gpio TEGRA_GPIO(W, 2) GPIO_ACTIVE_LOW>;

		clocks = <&tegra_car TEGRA30_CLK_PLL_A>,
			 <&tegra_car TEGRA30_CLK_PLL_A_OUT0>,
			 <&tegra_pmc TEGRA_PMC_CLK_OUT_1>;
		clock-names = "pll_a", "pll_a_out0", "mclk";

		assigned-clocks = <&tegra_car TEGRA30_CLK_EXTERN1>,
				  <&tegra_pmc TEGRA_PMC_CLK_OUT_1>;

		assigned-clock-parents = <&tegra_car TEGRA30_CLK_PLL_A_OUT0>,
					 <&tegra_car TEGRA30_CLK_EXTERN1>;
	};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////   REGULATORS   ////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

	/* 5V from AC or battery - IC: OZ8150 */
	vdd_ac_bat_reg: regulator-acbat {
		compatible = "regulator-fixed";
		regulator-name = "vdd_ac_bat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	/* 3.3V for system - IC: OZ8015 */
	vdd_3v3_sys_reg: regulator-3v3-sys {
		compatible = "regulator-fixed";
		regulator-name = "vdd_3v3_sys";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-boot-on;
	};

	vdd_fuse_3v3_reg: regulator-fuse {
		compatible = "regulator-fixed";
		regulator-name = "vdd_fuse_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(L, 6) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_ac_bat_reg>;
	};

	/* 1.2V Core Voltage - IC: TPS62361 */
	vdd_1v2_core_tegra_reg: regulator-1v2 {
		compatible = "regulator-fixed";
		regulator-name = "vdd_1v2_core_tegra";
		regulator-min-microvolt = <1200000>;
		regulator-max-microvolt = <1200000>;
		regulator-boot-on;
		regulator-always-on;
		enable-active-high;
		gpio = <&pmic 2 GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_ac_bat_reg>;
	};

	/* 1.35V DDR3 RAM voltage - IC: OZ8019 */
	vdd_1v35_ddr3_reg: regulator-1v35-ddr3 {
		compatible = "regulator-fixed";
		regulator-name = "vdd_1v35_ddr3_buck";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
		regulator-always-on;
		enable-active-high;
		gpio = <&pmic 7 GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_ac_bat_reg>;
	};

	vdd_5v0_sys_reg: regulator-5v0-sys {
		compatible = "regulator-fixed";
		regulator-name = "vdd_5v0_sys";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
		regulator-always-on;
		enable-active-high;
		gpio = <&pmic 8 GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_ac_bat_reg>;
	};

	cam_3v3_reg: regulator-cam {
		compatible = "regulator-fixed";
		regulator-name = "cam_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(BB, 4) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_3v3_sys_reg>;
	};

	emmc_3v3_reg: regulator-emmc {
		compatible = "regulator-fixed";
		regulator-name = "emmc_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
		regulator-boot-on;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(D, 1) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_3v3_sys_reg>;
	};

	vdd_pnl: vdd-panel {
		compatible = "regulator-fixed";
		regulator-name = "vdd_panel";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-boot-on;
		regulator-always-on;
		gpio = <&gpio TEGRA_GPIO(L, 4) GPIO_ACTIVE_HIGH>;
		enable-active-high;
	};

	vdd_fuse_3v3_reg: regulator-fuse {
		compatible = "regulator-fixed";
		regulator-name = "vdd_fuse_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(L, 6) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_3v3_sys_reg>;
	};

	vdd_touchpad_3v3_reg: regulator-touchpad {
		compatible = "regulator-fixed";
		regulator-name = "vdd_fuse_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(U, 4) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_3v3_sys_reg>;
	};

	vdd_3v3_com: regulator {
		compatible = "regulator-fixed";
		regulator-name = "vdd_3v3_com";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
		gpio = <&gpio TEGRA_GPIO(D, 0) GPIO_ACTIVE_HIGH>;
		enable-active-high;
	};

	ldo3_reg: tps65911-ldo3 {
		compatible = "regulator-fixed";
		regulator-name = "vddio_sdmmc";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};
};
